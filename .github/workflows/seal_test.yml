name: Python Code Security (Seal + Xray ZIP Upload)
on:
  push:
    branches: ["main"]
  workflow_dispatch:
permissions:
  contents: read
env:
  JFROG_CLI_BUILD_NAME: python-code-security
  JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
  JF_URL: ${{ secrets.JF_URL }}
jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # -- SEAL SECURITY FIX MODE --
      - name: Run Seal CLI - Fix Mode (Local)
        uses: seal-community/cli-action@latest
        with:
          mode: fix
          fix_mode: local
          token: ${{ secrets.SEAL_API_TOKEN }}
          project: ${{ secrets.SEAL_PROJECT_ID }}
      # -- PACKAGE AS ZIP --
      - name: Create ZIP Artifact
        run: |
          echo "üì¶ Zipping Python files and requirements..."
          zip -r seal-poc.zip app.py requirements.txt README.md
      # -- SETUP JFROG CLI --
      - uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest
      - name: Configure JFrog CLI with username + token
        run: |
          jf config add my-server \
            --url=${{ secrets.JF_URL }} \
            --user=${{ secrets.JFROG_USER }} \
            --password=${{ secrets.JFROG_PASSWORD }} \
            --interactive=false
          jf config use my-server
      # -- UPLOAD TO ARTIFACTORY --
      - name: Upload ZIP Artifact to Artifactory
        run: |
          echo "üöÄ Uploading seal-poc.zip to Artifactory..."
          jf rt upload seal-poc.zip demo-seal/seal-poc/seal-poc-${{ github.run_number }}.zip \
            --build-name=${{ env.JFROG_CLI_BUILD_NAME }} \
            --build-number=${{ env.JFROG_CLI_BUILD_NUMBER }} \
            --server-id=my-server
      
      # -- Generate SBOM using cyclonedx-bom --
      - name: Generate SBOM with cyclonedx-bom
        run: |
          echo "üìù Generating SBOM using cyclonedx-bom..."
          mkdir -p scan-output
          pip install cyclonedx-bom
          cyclonedx-py requirements -i requirements.txt -o scan-output/bom.json
          echo "SBOM file size: $(wc -c < scan-output/bom.json) bytes"
          
          # Create a properties file to enhance the SBOM attachment
          echo "sbom.type=cyclonedx" > scan-output/bom.properties
          echo "sbom.format=json" >> scan-output/bom.properties
          echo "sbom.version=1.4" >> scan-output/bom.properties
      
      # -- SCAN PROJECT WITH XRAY (Using JSON format) --
      - name: Scan Project with Xray
        run: |
          echo "üîç Scanning project with Xray and associating with build..."
          # Scan with JSON output format
          jf scan requirements.txt --build-name=${{ env.JFROG_CLI_BUILD_NAME }} --build-number=${{ env.JFROG_CLI_BUILD_NUMBER }} --server-id=my-server --format=json || echo "Scan command failed, continuing workflow"
      
      # -- SCAN AND SAVE RESULTS --
      - name: Scan and Save Results
        run: |
          echo "üîÑ Scanning and saving results to file..."
          # Create a scan results file
          jf scan requirements.txt --format=json --server-id=my-server > scan-output/scan-results.json || echo "Command failed, continuing workflow"
          
          if [ -f scan-output/scan-results.json ]; then
            echo "‚úÖ Scan results saved successfully"
            echo "Results file size: $(wc -c < scan-output/scan-results.json) bytes"
          else
            echo "‚ö†Ô∏è Failed to generate scan results file"
          fi
      
      # -- UPLOAD SBOM TO ARTIFACTORY (FIXED COMMAND) --
      - name: Upload SBOM to Artifactory
        run: |
          echo "üì§ Uploading SBOM directly to Artifactory..."
          jf rt upload scan-output/bom.json demo-seal/sboms/python-code-security-${{ github.run_number }}-sbom.json --build-name=${{ env.JFROG_CLI_BUILD_NAME }} --build-number=${{ env.JFROG_CLI_BUILD_NUMBER }} --server-id=my-server --props=sbom.type=cyclonedx;sbom.format=json;sbom.version=1.4


      
      # -- ATTACH SBOM TO BUILD INFO --
      - name: Attach SBOM to Build Info
        run: |
          echo "üîó Attaching SBOM to build info..."
          jf rt build-add-dependencies ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} scan-output/bom.json --server-id=my-server
      
      # -- ADD BUILD PROPERTIES FOR SBOM --
      - name: Add Build Properties for SBOM
        run: |
          echo "üè∑Ô∏è Adding build properties for SBOM..."
          jf rt build-add-git ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} --server-id=my-server
          jf rt build-collect-env ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} --server-id=my-server
          # Add build properties to indicate SBOM exists
          jf rt build-add-props ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} "sbom.available=true;sbom.type=cyclonedx" --server-id=my-server
      
      # -- PUBLISH FULL BUILD INFO TO ARTIFACTORY/XRAY --
      - name: Publish Build Info to Artifactory
        run: |
          echo "üì¶ Publishing build info to Artifactory..."
          jf rt build-publish ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} \
            --server-id=my-server
            
      # -- SCAN BUILD WITH XRAY --
      - name: Scan Build with Xray
        run: |
          echo "üõ°Ô∏è Scanning build with Xray..."
          jf build-scan ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} --server-id=my-server
