name: Python Code Security (Seal + Xray ZIP Upload)

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

env:
  JFROG_CLI_BUILD_NAME: python-code-security
  JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
  JF_URL: ${{ secrets.JF_URL }}

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # -- SEAL SECURITY FIX MODE --
      - name: Run Seal CLI - Fix Mode (Local)
        uses: seal-community/cli-action@latest
        with:
          mode: fix
          fix_mode: local
          token: ${{ secrets.SEAL_API_TOKEN }}
          project: ${{ secrets.SEAL_PROJECT_ID }}

      # -- PACKAGE AS ZIP --
      - name: Create ZIP Artifact
        run: |
          echo "ðŸ“¦ Zipping Python files and requirements..."
          zip -r seal-poc.zip app.py requirements.txt README.md

      # -- SETUP JFROG CLI --
      - uses: jfrog/setup-jfrog-cli@v4
        with:
          jfrog-version: latest

      - name: Configure JFrog CLI with username + token
        run: |
          jf config add my-server \
            --url=${{ secrets.JF_URL }} \
            --user=${{ secrets.JFROG_USER }} \
            --password=${{ secrets.JFROG_PASSWORD }} \
            --interactive=false
          jf config use my-server

      # -- UPLOAD TO ARTIFACTORY --
      - name: Upload ZIP Artifact to Artifactory
        run: |
          echo "ðŸš€ Uploading seal-poc.zip to Artifactory..."
          jf rt upload "seal-poc.zip" demo-seal/seal-poc/seal-poc-${{ github.run_number }}.zip \
            --build-name=${{ env.JFROG_CLI_BUILD_NAME }} \
            --build-number=${{ env.JFROG_CLI_BUILD_NUMBER }} \
            --server-id=my-server

      # -- GENERATE SBOM (CycloneDX) FROM requirements.txt --
      - name: Generate SBOM from Python requirements.txt
        run: |
          pip install cyclonedx-bom
          mkdir -p scan-output
          cyclonedx-py requirements -i requirements.txt -o scan-output/bom.json

      # -- ATTACH SBOM TO BUILD INFO --
      - name: Attach SBOM to Build Info
        run: |
          jf rt build-add-dependencies scan-output/bom.json \
            --build-name=${{ env.JFROG_CLI_BUILD_NAME }} \
            --build-number=${{ env.JFROG_CLI_BUILD_NUMBER }} \
            --server-id=my-server

      # -- PUBLISH FULL BUILD INFO TO ARTIFACTORY/XRAY --
      - name: Publish Build Info to Artifactory
        run: |
          echo "ðŸ“¦ Publishing build info to Artifactory..."
          jf rt build-publish ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} \
            --server-id=my-server
