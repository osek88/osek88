name: Python Code Security (Seal + Xray ZIP Upload)
on:
  push:
    branches: ["main"]
  workflow_dispatch:
permissions:
  contents: read
env:
  JFROG_CLI_BUILD_NAME: python-code-security
  JFROG_CLI_BUILD_NUMBER: ${{ github.run_number }}
  JF_URL: ${{ secrets.JF_URL }}
jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      # -- SEAL SECURITY FIX MODE --
      - name: Run Seal CLI - Fix Mode (Local)
        uses: seal-community/cli-action@latest
        with:
          mode: fix
          fix_mode: local
          token: ${{ secrets.SEAL_API_TOKEN }}
          project: ${{ secrets.SEAL_PROJECT_ID }}
      # -- PACKAGE AS ZIP --
      - name: Create ZIP Artifact
        run: |
          echo "üì¶ Zipping Python files and requirements..."
          zip -r seal-poc.zip app.py requirements.txt README.md
      # -- SETUP JFROG CLI --
      - uses: jfrog/setup-jfrog-cli@v4
        with:
          version: latest
      - name: Configure JFrog CLI with username + token
        run: |
          jf config add my-server \
            --url=${{ secrets.JF_URL }} \
            --user=${{ secrets.JFROG_USER }} \
            --password=${{ secrets.JFROG_PASSWORD }} \
            --interactive=false
          jf config use my-server
      # -- UPLOAD TO ARTIFACTORY --
      - name: Upload ZIP Artifact to Artifactory
        run: |
          echo "üöÄ Uploading seal-poc.zip to Artifactory..."
          jf rt upload "seal-poc.zip" demo-seal/seal-poc/seal-poc-${{ github.run_number }}.zip \
            --build-name=${{ env.JFROG_CLI_BUILD_NAME }} \
            --build-number=${{ env.JFROG_CLI_BUILD_NUMBER }} \
            --server-id=my-server
      
      # -- Check JFrog CLI Version --
      - name: Check JFrog CLI Version and Available Commands
        run: |
          echo "üîç Checking JFrog CLI version and commands..."
          jf -v
          jf -h | grep scan
      
      # -- Generate SBOM using traditional method --
      - name: Generate SBOM with cyclonedx-bom
        run: |
          echo "üìù Generating SBOM using cyclonedx-bom..."
          mkdir -p scan-output
          pip install cyclonedx-bom
          cyclonedx-py requirements -i requirements.txt -o scan-output/bom.json
          echo "SBOM file size: $(wc -c < scan-output/bom.json) bytes"
      
      # -- SCAN PROJECT WITH XRAY --
      - name: Scan Project with Xray
        run: |
          echo "üîç Scanning project with Xray..."
          # Direct scan of requirements.txt and associate with build
          jf scan requirements.txt --build-name=${{ env.JFROG_CLI_BUILD_NAME }} --build-number=${{ env.JFROG_CLI_BUILD_NUMBER }} --server-id=my-server --format=cyclonedx
      
      # -- Try Alternative SBOM Generation --
      - name: Try Alternative SBOM Generation
        run: |
          echo "üîÑ Attempting alternative SBOM generation..."
          # Create a temporary package for scanning
          pip freeze > freeze-requirements.txt
          # Try scanning with output format
          jf scan freeze-requirements.txt --format cyclonedx --output scan-output/xray-sbom.json --server-id=my-server || echo "Command failed, continuing workflow"
          
          if [ -f scan-output/xray-sbom.json ]; then
            echo "‚úÖ Xray SBOM generated successfully"
            echo "SBOM file size: $(wc -c < scan-output/xray-sbom.json) bytes"
          else
            echo "‚ö†Ô∏è Xray SBOM generation failed, using cyclonedx SBOM"
          fi
      
      # -- ATTACH SBOM TO BUILD INFO --
      - name: Attach SBOM to Build Info
        run: |
          echo "üîó Attaching SBOM to build info..."
          # Use the appropriate SBOM file based on what was generated
          if [ -f scan-output/xray-sbom.json ] && [ -s scan-output/xray-sbom.json ]; then
            echo "Using Xray-generated SBOM"
            jf rt build-add-dependencies ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} scan-output/xray-sbom.json --server-id=my-server
          else
            echo "Using CycloneDX-generated SBOM"
            jf rt build-add-dependencies ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} scan-output/bom.json --server-id=my-server
          fi
      
      # -- PUBLISH FULL BUILD INFO TO ARTIFACTORY/XRAY --
      - name: Publish Build Info to Artifactory
        run: |
          echo "üì¶ Publishing build info to Artifactory..."
          jf rt build-publish ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} \
            --server-id=my-server
            
      # -- SCAN BUILD WITH XRAY --
      - name: Scan Build with Xray
        run: |
          echo "üõ°Ô∏è Scanning build with Xray..."
          jf build-scan ${{ env.JFROG_CLI_BUILD_NAME }} ${{ env.JFROG_CLI_BUILD_NUMBER }} --server-id=my-server
